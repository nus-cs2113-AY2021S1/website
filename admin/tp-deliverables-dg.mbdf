* **Should match the {{ final_version }} implementation**. Optionally, can include proposed implementations of future features.
* **Follow the [AddressBook-Level3 (AB3) DG]({{ ab3_website }}/DeveloperGuide.html) structure**. Sections to include in your DG:
  * Design: similar to AB3 DG except,
    * you may omit the _Architecture_ section (no penalty)
    * if you have not organized the code into clearly divided components (no penalty if you didn't), you can use a single class diagram (if it is not too complicated) or use several class diagrams each describing a different area of the system.
  * Implementation: similar to AB3 DG
  * Appendix A: Product Scope
  * Appendix B: User Stories
  * Appendix C: Non Functional Requirements
  * Appendix D: Glossary
  * Appendix E: Instructions for Manual Testing (more details below)

* {{ icon_important_big_red }} **Include an appendix named _Instructions for Manual Testing_**, to give some guidance to the tester to chart a path through the features, and provide some important test inputs the tester can copy-paste into the app.
  * **Cover all user-testable features**.
  * **No need to give a long list of test cases** including all possible variations. It is upto the tester to come up with those variations.
  * **Inaccurate instructions will be considered bugs**.

##### DG Tips

<span id="dgTips">

* **Aim to showcase your documentation skills.** The stated objective of the DG is to explain the implementation to a future developer, but a secondary objective is to serve as evidence of your ability to document deeply-technical content using prose, examples, diagrams, code snippets, etc. appropriately. To that end, you may also describe features that you plan to implement in the future, even beyond {{ final_version }} (hypothetically).<br>
  For an example, see [the description of the undo/redo feature implementation in the AddressBook-Level3 (AB3) developer guide]({{ ab3_website }}/DeveloperGuide.html#proposed-undo-redo-feature).
* **Use multiple UML diagram types.** Following from the point above, try to include UML diagrams of multiple types to showcase your ability to use different UML diagrams.
* **Keep diagrams simple.** The aim is to make diagrams ==_comprehensible_, not necessarily _comprehensive_==.<br>
  Ways to simplify diagrams:
  * **Omit less important details**. Examples:
    * a class diagram can omit minor utility classes, private/unimportant members; some less-important associations can be shown as attributes instead.
    * a sequence diagram can omit less important interactions, self-calls. 
  * **Omit repetitive details** e.g., a class diagram can show only a few representative ones in place of many similar classes (note how the <trigger trigger="click" for="modal:ipWeek10-logicClassDiagram">AB3 Logic class diagram</trigger> shows concrete `*Command` classes).
  * **Limit the scope of a diagram.** Decide the purpose of the diagram (i.e., what does it help to explain?) and omit details not relevant to that purpose.
  * **Break diagrams into smaller fragments** when possible.
    * If a component has a lot of classes, consider further dividing into sub-components (e.g., a Parser sub-component inside the Logic component). After that, sub-components can be shown as black-boxes in the main diagram and their details can be shown as separate diagrams.
    * You can use `ref` frames to break sequence diagrams to multiple diagrams.
* **Integrate diagrams into the description.** Place the diagram close to where it is being described.
* **Use code snippets sparingly.** The more you use code snippets in the DG, and longer the code snippet, the higher the risk of it getting outdated quickly. Instead, use code snippets only when necessary and cite only the strictly relevant parts only.
* **Resize diagrams** so that the text size in the diagram matches the the text size of the main text of the diagram. See <trigger trigger="click" for="modal:ipWeek10-diagramSizeNegative">example</trigger>.


<modal large title="UML Diagrams: Negative Examples " id="modal:ipWeek10-umlExamples">

  These class diagrams seem to have lot of member details, which can get outdated pretty quickly:<br>
  <img src="https://cs2103-ay1819s1-w10-3.github.io/main/images/PollClassDiagram.png" width="750" /><br>
  <img src="https://cs2103-ay1819s1-w10-4.github.io/main/images/healthPlanClassDiagram.png" width="750" />

  <hr>
  This class diagram seems to have too many classes:
  <img src="https://cs2103-ay1819s1-f10-1.github.io/main/images/ModelClassDiagram.png" width="750" />

  <hr>
  These sequence diagrams are bordering on 'too complicated':
  <img src="https://cs2103-ay1819s1-w13-1.github.io/main/images/TagCommandSequenceDiagram.png" width="750" />
  <p/>
  <img src="https://cs2103-ay1819s1-f10-1.github.io/main/images/modifyPermissionSequenceDiagram.png" width="750" />

</modal>

<modal large title="Diagram resizing: a negative example" id="modal:ipWeek10-diagramSizeNegative">

In this negative example, the text size in the diagram is much bigger than the text size used by the document:<br> 
<img src="images/diagramSizeNegativeExample.png" width="200"/><br>
It will look more 'polished' if the two text sizes match.
</modal>

<modal large title="AB3 - Class Diagram of the Logic Component" id="modal:ipWeek10-logicClassDiagram">
  <img src="{{ ab3_website }}/images/LogicClassDiagram.png" width="900"/>
</modal>

<modal large title="AB3 - Sequence Diagram for the `delete` command" id="modal:ipWeek10-deleteSd">
  <img src="{{ ab3_website }}/images/DeleteSequenceDiagram.png" width="900"/>
</modal>

<modal large title="AB3 - Architecture-Level Sequence Diagram" id="modal:ipWeek10-archiSd">
  <img src="{{ ab3_website }}/images/ArchitectureSequenceDiagram.png"/>
</modal>
</span>
